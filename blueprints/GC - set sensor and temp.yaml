blueprint:
  name: GC - Manage GC-TBZ Time Period Control
  description: Manage time periods based target temperature update(s) for GC-TBZ48 Smart Thermostat
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    global_section:
      name: Global Settings
      icon: mdi:cog
      description: Global Settings
      collapsed: true
      input:
        frequency:
          name: Frequency
          description: How often to check sensor status?
            (1 min should be used for time periods start times not set on 5, 10, or 15 minute start times.)
          selector:
            select:
              options:
                - /1
                - /5
                - /10
                - /15
                - /30
              custom_value: false
              multiple: false
        default_temp:
          name: Default Temperature
          description: In case of issues with the sensors, the thermostat will default to this value.
          default:
          selector:
            number:
              min: 66.0
              max: 96.0
              step: 1.0
              mode: slider
        default_sensor:
          name: Fallback Temperature Sensor
          description: In case of issues selecting a temperature sensor,
            the sensor used for controlling the thermostat will be set to this sensor.
            (This should usually be set to the Thermostat's Air Temperature sensor.)
          selector:
            entity:
              filter:
                - domain:
                    - sensor
              multiple: false
#
#  source url: https://github.com/RockDad/GC-TBZ48-Thermostat-Scheduler/blob/main/blueprints/GC%20-%20set%20sensor%20and%20temp.yaml
#
triggers:
  - trigger: time_pattern
    minutes: !input frequency
action:
  - variables:
      temp_current_sensor: select.gc_tbz48_smart_thermostat_current_sensor
      temp_current_target: number.gc_tbz48_smart_thermostat_current_target_temperature
      sensor_1: select.gc_tbz48_smart_thermostat_m_f_sensor_1
      sensor_2: select.gc_tbz48_smart_thermostat_m_f_sensor_2
      sensor_3: select.gc_tbz48_smart_thermostat_m_f_sensor_3
      sensor_4: select.gc_tbz48_smart_thermostat_m_f_sensor_4
      sensor_1_ss: select.gc_tbz48_smart_thermostat_s_s_sensor_1
      sensor_2_ss: select.gc_tbz48_smart_thermostat_s_s_sensor_2
      sensor_3_ss: select.gc_tbz48_smart_thermostat_s_s_sensor_3
      sensor_4_ss: select.gc_tbz48_smart_thermostat_s_s_sensor_4
      target_temp_1: number.gc_tbz48_smart_thermostat_m_f_temperature_1
      target_temp_2: number.gc_tbz48_smart_thermostat_m_f_temperature_2
      target_temp_3: number.gc_tbz48_smart_thermostat_m_f_temperature_3
      target_temp_4: number.gc_tbz48_smart_thermostat_m_f_temperature_4
      target_temp_1_ss: number.gc_tbz48_smart_thermostat_s_s_temperature_1
      target_temp_2_ss: number.gc_tbz48_smart_thermostat_s_s_temperature_2
      target_temp_3_ss: number.gc_tbz48_smart_thermostat_s_s_temperature_3
      target_temp_4_ss: number.gc_tbz48_smart_thermostat_s_s_temperature_4
      time_1: time.gc_tbz48_smart_thermostat_m_f_time_1
      time_2: time.gc_tbz48_smart_thermostat_m_f_time_2
      time_3: time.gc_tbz48_smart_thermostat_m_f_time_3
      time_4: time.gc_tbz48_smart_thermostat_m_f_time_4
      time_1_ss: time.gc_tbz48_smart_thermostat_s_s_time_1
      time_2_ss: time.gc_tbz48_smart_thermostat_s_s_time_2
      time_3_ss: time.gc_tbz48_smart_thermostat_s_s_time_3
      time_4_ss: time.gc_tbz48_smart_thermostat_s_s_time_4
      default_temp: !input default_temp
      default_temp_float: "{{ default_temp | float}}"
      default_sensor: !input default_sensor
      now_time: "{{ now().strftime('%H:%M') }}"
      wd: "{{ now().weekday() }}"
      is_weekend: "{{ wd >= 5 }}"
      t1: "{{ states(time_1)[:5] }}"
      t2: "{{ states(time_2)[:5] }}"
      t3: "{{ states(time_3)[:5] }}"
      t4: "{{ states(time_4)[:5] }}"
      t1ss: "{{ states(time_1_ss)[:5] }}"
      t2ss: "{{ states(time_2_ss)[:5] }}"
      t3ss: "{{ states(time_3_ss)[:5] }}"
      t4ss: "{{ states(time_4_ss)[:5] }}"
      current_sensor:
        "{% if is_weekend and t1ss == now_time %}\n  {{ states(sensor_1_ss)
        }}\n{% elif is_weekend and t2ss == now_time %}\n  {{ states(sensor_2_ss) }}\n{%
        elif is_weekend and t3ss == now_time %}\n  {{ states(sensor_3_ss) }}\n{% elif
        is_weekend and t4ss == now_time %}\n  {{ states(sensor_4_ss) }}\n{% elif not
        is_weekend and t1 == now_time %}\n  {{ states(sensor_1) }}\n{% elif not is_weekend
        and t2 == now_time %}\n  {{ states(sensor_2) }}\n{% elif not is_weekend and
        t3 == now_time %}\n  {{ states(sensor_3) }}\n{% elif not is_weekend and t4 ==
        now_time %}\n  {{ states(sensor_4) }}\n{% else %}\n  {{ default_sensor }}\n{% endif %}"
      current_target_temp:
        "{% if is_weekend and t1ss == now_time %}\n  {{ states(target_temp_1_ss)
        }}\n{% elif is_weekend and t2ss == now_time %}\n  {{ states(target_temp_2_ss)
        }}\n{% elif is_weekend and t3ss == now_time %}\n  {{ states(target_temp_3_ss)
        }}\n{% elif is_weekend and t4ss == now_time %}\n  {{ states(target_temp_4_ss)
        }}\n{% elif not is_weekend and t1 == now_time %}\n  {{ states(target_temp_1)
        }}\n{% elif not is_weekend and t2 == now_time %}\n  {{ states(target_temp_2)
        }}\n{% elif not is_weekend and t3 == now_time %}\n  {{ states(target_temp_3)
        }}\n{% elif not is_weekend and t4 == now_time %}\n  {{ states(target_temp_4)
        }}\n{% else %}\n  {{ default_temp }}\n{% endif %}"
      matched_interval: "{% if is_weekend %}
        {{ now_time in [t1ss, t2ss, t3ss, t4ss] }}
        {% else %}
        {{ now_time in [t1, t2, t3, t4] }}
        {% endif %}"
  - choose:
      - conditions: "{{ matched_interval }}"
        sequence:
          - action: select.select_option
            target:
              entity_id: select.gc_tbz48_smart_thermostat_current_sensor
            data:
              option: "{{ current_sensor }}"
          - action: number.set_value
            target:
              entity_id: number.gc_tbz48_smart_thermostat_current_target_temperature
            data:
              value: "{{ current_target_temp }}"
